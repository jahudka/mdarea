{"version":3,"sources":["mdarea.js"],"names":["root","factory","define","amd","module","exports","MarkdownArea","self","this","ctrlKey","test","navigator","platform","reDoubledInline","rePrefix","reSingleQuotePrefix","reList","reCleanIndent","rePureIndent","reIncrement","reStripLast","reMkIndent","codeBlocks","`","~","openingParens","[","(","{","<","closingParens","]",")","}",">","defaultKeymap","enter","indent","outdent","inline","elem","options","_options","keyMap","knownKeys","list","action","hasOwnProperty","keys","Array","isArray","toString","trim","split","push","apply","map","key","normalizeKey","forEach","shortcut","altKey","shiftKey","metaKey","normalizeKeyMap","join","replace","_reOutdent","RegExp","_handleKey","bind","setElement","opts","k","toLowerCase","value","s","e","selectionStart","selectionEnd","arguments","length","window","evt","InputEvent","dispatchEvent","toIndent","prefix","pure","prototype","constructor","getElement","_elem","removeEventListener","addEventListener","getValue","setValue","destroy","defaultPrevented","find","prop","matchesKey","target","substring","selection","postfix","shift","info","str","offset","lastIndexOf","line","m","exec","charAt","base","_","n","parseInt","handleEnterKey","handleIndentKey","reOutdent","handleOutdentKey","slice","preventDefault"],"mappings":"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","file":"mdarea.min.js","sourcesContent":["(function(root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define([], factory);\n    } else if (typeof module === 'object' && module.exports) {\n        module.exports = factory();\n    } else {\n        root.MarkdownArea = factory();\n    }\n})(typeof self !== 'undefined' ? self : this, function() {\n\n    var isMac = /mac|iphone|ipad|ipod/i.test(navigator.platform),\n        ctrlKey = isMac ? 'metaKey' : 'ctrlKey',\n        reDoubledInline = /[*_]/,\n        rePrefix = /^[ \\t]*(?:(?:[-+*]|\\d+\\.)[ \\t]+(?:\\[[ x]][ \\t]+)?|>[ \\t]*)*(?::[ \\t]*)?/,\n        reSingleQuotePrefix = /[-=\\s\"'`<>\\[\\](){}+*^$\\\\.|]$/,\n        reList = /(?:[-+*]|\\d+\\.)[ \\t]+(?:\\[[ x]][ \\t]+)?$/,\n        reCleanIndent = /[-+*\\[\\]x\\d.]/g,\n        rePureIndent = /[^ \\t]/g,\n        reIncrement = /(\\d+)\\.(?=[ \\t]+$)/,\n        reStripLast = /(?:(?:^[ \\t]+)?(?:[-+*]|\\d+\\.|[>:])(?:[ \\t]+\\[[ x]])?[ \\t]*|^[ \\t]+)$/,\n        reMkIndent = /^(?!$)/mg,\n        codeBlocks = {'`': /^``$/m, '~': /^~~$/m},\n        openingParens = {'[': ']', '(': ')', '{': '}', '<': '>'},\n        closingParens = {']': '[', ')': '(', '}': '{', '>': '<'};\n\n    var defaultKeymap = {\n        enter: ['Enter', 'Shift+Enter'],\n        indent: ['Tab', 'Ctrl+m'],\n        outdent: ['Shift+Tab', 'Ctrl+Shift+m'],\n        inline: ['\"', \"'\", '`', '*', '_', '[', ']', '(', ')', '{', '}', '<', '>'],\n    };\n\n\n    function MarkdownArea(elem, options) {\n        this._options = normalizeOptions(options);\n        this._reOutdent = new RegExp('^' + this._options.indent, 'mg');\n        this._handleKey = this._handleKey.bind(this);\n        this.setElement(elem);\n    }\n\n    MarkdownArea.prototype = {\n        constructor: MarkdownArea,\n\n        getElement: function () {\n            return this._elem;\n        },\n\n        setElement: function (elem) {\n            if (this._elem) {\n                this._elem.removeEventListener('keydown', this._handleKey);\n            }\n\n            this._elem = elem;\n            elem.addEventListener('keydown', this._handleKey);\n        },\n\n        getValue: function () {\n            return this._elem.value;\n        },\n\n        setValue: function (value) {\n            this._elem.value = value;\n        },\n\n        destroy: function () {\n            this._elem.removeEventListener('keydown', this._handleKey);\n            this._elem = this._options = this._reOutdent = this._handleKey = null;\n        },\n\n        _handleKey: function (evt) {\n            if (!evt.defaultPrevented) {\n                var shortcut = this._options.keyMap.find(function(shortcut) {\n                    return matchesKey(evt, shortcut.key);\n                });\n\n                if (shortcut) {\n                    var prefix = evt.target.value.substring(0, evt.target.selectionStart),\n                        selection = evt.target.value.substring(evt.target.selectionStart, evt.target.selectionEnd),\n                        postfix = evt.target.value.substring(evt.target.selectionEnd);\n\n                    switch (shortcut.action) {\n                        case 'enter':\n                            handleEnterKey(this._elem, prefix, selection, postfix, this._options.indent, evt.shiftKey);\n                            break;\n                        case 'indent':\n                            handleIndentKey(this._elem, prefix, selection, postfix, this._options.indent);\n                            break;\n                        case 'outdent':\n                            handleOutdentKey(this._elem, prefix, selection, postfix, this._options.indent, this._reOutdent);\n                            break;\n                        case 'inline':\n                            handleInlineKey(this._elem, prefix, selection, postfix, evt.key);\n                            break;\n                    }\n\n                    evt.preventDefault();\n                }\n            }\n        }\n    };\n\n    function normalizeOptions(options) {\n        options || (options = {});\n        options.keyMap = normalizeKeyMap(options.keyMap);\n        options.indent = normalizeIndent(options.indent || '    ');\n        return options;\n    }\n\n    function normalizeKeyMap(keyMap) {\n        keyMap || (keyMap = {});\n        var knownKeys = {};\n        var list = [];\n\n        for (var action in defaultKeymap) if (defaultKeymap.hasOwnProperty(action)) {\n            var keys = keyMap[action] || defaultKeymap[action];\n\n            if (!Array.isArray(keys)) {\n                keys = keys.toString().trim().split(/\\s*[|,]\\s*/g);\n            }\n\n            list.push.apply(list, keys.map(function(key) {\n                key = normalizeKey(key);\n                key.key in knownKeys || (knownKeys[key.key] = 0);\n                ++knownKeys[key.key];\n\n                return {\n                    key: key,\n                    action: action\n                };\n            }));\n        }\n\n        list.forEach(function(shortcut) {\n            if (knownKeys[shortcut.key.key] > 1) {\n                completeModifiers(shortcut.key);\n            }\n        });\n\n        return list;\n    }\n\n    function normalizeKey(key) {\n        var opts = {};\n\n        key.trim().split(/\\s*\\+\\s*/g).forEach(function(k) {\n            switch (k.toLowerCase()) {\n                case 'ctrl':\n                case 'cmd':\n                    opts[ctrlKey] = true;\n                    break;\n                case 'shift':\n                    opts.shiftKey = true;\n                    break;\n                case 'alt':\n                    opts.altKey = true;\n                    break;\n                default:\n                    opts.key = k;\n            }\n        });\n\n        return opts;\n    }\n\n    function completeModifiers(key) {\n        'ctrlKey' in key || (key.ctrlKey = false);\n        'altKey' in key || (key.altKey = false);\n        'shiftKey' in key || (key.shiftKey = false);\n        'metaKey' in key || (key.metaKey = false);\n    }\n\n    function normalizeIndent(indent) {\n        if (typeof indent === 'number') {\n            return new Array(indent + 1).join(' ');\n        } else {\n            return (indent + '').replace(/[^ \\t]/g, ' ');\n        }\n    }\n\n    function matchesKey(evt, key) {\n        for (var prop in key) if (key.hasOwnProperty(prop)) {\n            if (evt[prop] !== key[prop]) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    function handleEnterKey (elem, prefix, selection, postfix, indent, shift) {\n        var info = !selection ? getLineInfo(prefix) : null;\n\n        if (!selection) {\n            if (info.line && info.line.charAt(info.line.length - 1) in openingParens) {\n                var base = (info.prefix ? toIndent(info.prefix, true) : '');\n                postfix = \"\\n\" + base + postfix;\n\n                if (!shift) {\n                    prefix += \"\\n\" + base + indent;\n                }\n            } else if (info.prefix) {\n                if (!shift && info.prefix === info.line) {\n                    prefix = prefix.substring(0, info.offset) + stripLast(info.prefix);\n                } else if (!shift && isList(info.prefix)) {\n                    prefix += \"\\n\" + increment(info.prefix);\n                } else {\n                    prefix += \"\\n\" + toIndent(info.prefix, shift);\n                }\n            } else {\n                prefix += \"\\n\";\n            }\n        } else {\n            prefix += \"\\n\";\n        }\n\n        apply(elem, prefix + postfix, prefix.length);\n    }\n\n    function handleIndentKey (elem, prefix, selection, postfix, indent) {\n        var s = prefix.length,\n            n = prefix.lastIndexOf(\"\\n\") + 1;\n\n        if (n < s) {\n            selection = prefix.substring(n) + selection;\n            prefix = prefix.substring(0, n);\n        }\n\n        if (n < s || !selection) {\n            s += indent.length;\n        }\n\n        if (selection) {\n            selection = selection.replace(reMkIndent, indent);\n        } else {\n            prefix += indent;\n        }\n\n        apply(elem, prefix + selection + postfix, s, selection ? n + selection.length : s);\n    }\n\n    function handleOutdentKey (elem, prefix, selection, postfix, indent, reOutdent) {\n        var s = prefix.length,\n            n = prefix.lastIndexOf(\"\\n\") + 1;\n\n        if (n < s) {\n            selection = prefix.substring(n) + selection;\n            prefix = prefix.substring(0, n);\n\n            if (selection.substring(0, indent.length) === indent) {\n                s -= indent.length;\n            }\n        }\n\n        selection = selection.replace(reOutdent, '');\n        apply(elem, prefix + selection + postfix, s, n + selection.length);\n    }\n\n    function handleInlineKey (elem, prefix, selection, postfix, key) {\n        if (!selection && !(key in openingParens) && postfix.charAt(0) === key) {\n            apply(elem, prefix + (reDoubledInline.test(key) ? key + key : '') + postfix, prefix.length + 1);\n        } else if (!selection && (key === \"'\" && !reSingleQuotePrefix.test(prefix) || key in closingParens)) {\n            apply(elem, prefix + key + postfix, prefix.length + 1);\n        } else if (!selection && key in codeBlocks && codeBlocks[key].test(prefix)) {\n            apply(elem, prefix + key + \"language\\n\" + key + key + key + (postfix.charAt(0) !== \"\\n\" ? \"\\n\" : '') + postfix, prefix.length + 1, prefix.length + 9);\n        } else if (key === prefix.slice(-1) && key === postfix.slice(0, 1)) {\n            apply(\n                elem,\n                prefix.slice(0, -1) + selection + postfix.slice(1),\n                prefix.length - 1,\n                prefix.length - 1 + selection.length\n            );\n        } else {\n            apply(\n                elem,\n                prefix + (closingParens[key] || key) + selection + (openingParens[key] || key) + postfix,\n                prefix.length + 1,\n                prefix.length + 1 + selection.length\n            );\n        }\n    }\n\n    function apply(elem, value, s, e) {\n        elem.value = value;\n        elem.selectionStart = s;\n        elem.selectionEnd = arguments.length > 3 ? e : s;\n\n        if ('InputEvent' in window) try {\n            var evt = new InputEvent('input');\n            elem.dispatchEvent(evt);\n        } catch (e) { }\n    }\n\n    function getLineInfo(str) {\n        var offset = str.lastIndexOf(\"\\n\") + 1,\n            line = str.substring(offset),\n            m = rePrefix.exec(line);\n\n        return {\n            line: line,\n            offset: offset,\n            prefix: m && m[0]\n        };\n    }\n\n    function isList(prefix) {\n        return reList.test(prefix);\n    }\n\n    function toIndent(prefix, pure) {\n        return prefix.replace(pure ? rePureIndent : reCleanIndent, ' ');\n    }\n\n    function increment(prefix) {\n        return prefix.replace(reIncrement, function (_, n) {\n            return (parseInt(n) + 1) + '.';\n        })\n    }\n\n    function stripLast(prefix) {\n        return prefix.replace(reStripLast, '');\n    }\n\n\n    return MarkdownArea;\n\n});\n"]}